using Godot;
using System;
using System.IO.IsolatedStorage;

/*
*
*
*
*
*
*
*/

public partial class Terrain : Node3D
{

    [Export] NoiseTexture2D noiseTexture;

    private float[] Field;
    Vector3I FieldSize;


    MeshInstance3D MarchingCubesMesh;
    StaticBody3D MarchingCubesCollison;


    float t;

    //
    //
    //

    private int[,] TriangleTable;

    public override void _Ready()
    {
        // určíme velikost pole/chunku
        FieldSize = new Vector3I(16, 16, 16);
        // marching cubes voxel data
        // 3D textura.
        Field = new float[FieldSize.X * FieldSize.Y * FieldSize.Z];
        Field[0] = 0.6f;
        //Field[1] = 1.0f;
        t = 0.0f;

        Vector3 Point = new Vector3(8.0f, 8.0f, 8.0f);
        float dist = (GD.Randi() % 100) * 0.1f;
        for (uint z = 0; z < FieldSize.Z; z++)
        {
            for (uint y = 0; y < FieldSize.Y; y++)
            {
                for (uint x = 0; x < FieldSize.X; x++)
                {
                    uint CellIndex = x + y * (uint)FieldSize.X + z * (uint)FieldSize.X * (uint)FieldSize.Y;
                    Vector3 CellPosition = new Vector3((float)x, (float)y, (float)z);
                    Vector3 Distance = CellPosition - Point;
                    Field[CellIndex] = Distance.Length() - 4.0f;
                }
            }
        }

        InitTriangulationTable();


        //MarchingCubes.CreateMesh();
        //
        //
        //

        Material MeshMaterial = ResourceLoader.Load<Material>("res://materials/material1.tres");

        Godot.ArrayMesh arrMesh = GenerateMeshData2(100);

        //MarchCubes();
        //Godot.ArrayMesh arrMesh = MarchCubes();

        MeshInstance3D GeneratedMesh = new MeshInstance3D();
        GeneratedMesh.Mesh = arrMesh;
        GeneratedMesh.SetSurfaceOverrideMaterial(0, MeshMaterial);
        //GeneratedMesh.CreateConvexCollision();
        GeneratedMesh.CreateTrimeshCollision();
        AddChild(GeneratedMesh);


        //Godot.ArrayMesh arrMesh2 = MarchCubes();
        //MeshInstance3D GeneratedMesh2 = new MeshInstance3D();
        //GeneratedMesh2.Mesh = arrMesh2;
        //GeneratedMesh2.SetSurfaceOverrideMaterial(0, MeshMaterial);
        //AddChild(GeneratedMesh2);

        MarchingCubesMesh = new MeshInstance3D();
        MarchingCubesMesh.Translate(new(-10.0f, -10.0f, 0.0f));
        //MarchingCubesMesh.SetSurfaceOverrideMaterial(0, MeshMaterial);
        AddChild(MarchingCubesMesh);

        Godot.ArrayMesh arrMesh2 = MarchCubes();
        MarchingCubesMesh.Mesh = arrMesh2;

        MarchingCubesMesh.CreateTrimeshCollision();

        //CollisionShape3D shape3D = new CollisionShape3D();
        //shape3D.Shape.
        //shape3D.
        GD.Print("Terrain: generated");
    }

    public override void _PhysicsProcess(double delta)
    {
        return;
        //base._PhysicsProcess(delta);

        Vector3 Point = new Vector3(8.0f, 8.0f, 8.0f);
        float dist = (GD.Randi() % 100) * 0.1f;
        for (uint z = 0; z < FieldSize.Z; z++)
        {
            for (uint y = 0; y < FieldSize.Y; y++)
            {
                for (uint x = 0; x < FieldSize.X; x++)
                {
                    uint CellIndex = x + y * (uint)FieldSize.X + z * (uint)FieldSize.X * (uint)FieldSize.Y;
                    Vector3 CellPosition = new Vector3((float)x, (float)y, (float)z);
                    Vector3 Distance = CellPosition - Point;
                    Field[CellIndex] = Distance.Length() - (Mathf.Sin(t) + 1.0f) * 4.0f;
                    Mathf.Sin(t);
                }
            }
        }
        t += 0.005f;

        Godot.ArrayMesh arrMesh2 = MarchCubes();
        MarchingCubesMesh.Mesh = arrMesh2;
    }



    //
    //
    //


    private static Godot.ArrayMesh GenerateMeshData(int size)
    {
        // define
        Vector3[] vertices = new Vector3[size * size];
        Vector3[] normals = new Vector3[size * size];
        int[] indices = new int[(size - 1) * (size - 1) * 6];


        Vector3[] face_normals = new Vector3[(size - 1) * (size - 1) * 2];

        // vertices
        for (int y = 0; y < size; y++)
        {
            for (int x = 0; x < size; x++)
            {
                vertices[x + y * size] = new Vector3(x, (GD.Randi() % 100) * 0.01f - 1.0f, y);
                //vertices[x + y * size] = new Vector3(x, -1.0f, y);
            }
        }

        for (int y = 0; y < size - 1; y++)
        {
            for (int x = 0; x < size - 1; x++)
            {
                //Vector3 vertex1 = vertices[x + y * size];
                //Vector3 vertex2 = vertices[x + y * size + 1];
                //normals[x + y * size] = new Vector3();
                //normals[x + y * size] = -vertex2.Cross(vertex1);
                //GD.Print("normal: ", normals[x + y * size]);
            }
        }
        // normal
        for (int i = 0; i < size * size; i++)
        {
            // musí obsahovat více vertexů
            //Vector3 vertex1 = vertices[i];



            //normals[i] = new Vector3(0.0f, 1.0f, 0.0f);
            //normal = normalize(cross(vec3(gl_in[1].gl_Position - gl_in[0].gl_Position) , vec3(gl_in[2].gl_Position - gl_in[0].gl_Position)));
        }



        // indices
        for (int y = 0; y < size - 1; y++)
        {
            for (int x = 0; x < size - 1; x++)
            {
                // CWW
                // triangle 1
                indices[(x + y * (size - 1)) * 6] = x + y * size;
                indices[(x + y * (size - 1)) * 6 + 1] = x + y * size + 1;
                indices[(x + y * (size - 1)) * 6 + 2] = x + y * size + size;
                // triangle 2
                indices[(x + y * (size - 1)) * 6 + 3] = x + y * size + 1;
                indices[(x + y * (size - 1)) * 6 + 4] = x + y * size + size + 1;
                indices[(x + y * (size - 1)) * 6 + 5] = x + y * size + size;


                face_normals[(x + y * (size - 1)) * 2] = new Vector3(0, 1, 0);
                face_normals[(x + y * (size - 1)) * 2 + 1] = new Vector3(0, 1, 0);

                Vector3 v1 = vertices[indices[(x + y * (size - 1)) * 6 + 1]] - vertices[indices[(x + y * (size - 1)) * 6]];
                Vector3 v2 = vertices[indices[(x + y * (size - 1)) * 6 + 2]] - vertices[indices[(x + y * (size - 1)) * 6]];
                //Vector3 v3 = vertices[indices[(x + y * (size - 1)) * 6 + 4]];


                face_normals[(x + y * (size - 1)) * 2] = v2.Cross(v1);
                //face_normals[(x + y * (size - 1)) * 2 + 1] = v2.Cross(v3);


                //




            }
        }


        for (int y = 0; y < size - 1; y++)
        {
            for (int x = 0; x < size - 1; x++)
            {
                //face_normals[(x + y * (size - 1)) * 2] = new Vector3(0, 1, 0);

                normals[x + y * size] = new Vector3(0.0f, 1.0f, 0.0f);

                normals[x + y * size] = face_normals[x + y * (size - 1) * 2];

                // get conected faces...
            }
        }



        // přeměníme data na ArrayMesh
        Godot.ArrayMesh arrMesh = new ArrayMesh();
        Godot.Collections.Array arrays = [];
        arrays.Resize((int)Mesh.ArrayType.Max);
        arrays[(int)Mesh.ArrayType.Vertex] = vertices;
        arrays[(int)Mesh.ArrayType.Normal] = normals;
        arrays[(int)Mesh.ArrayType.Index] = indices;
        arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
        return arrMesh;
    }
    private Godot.ArrayMesh GenerateMeshData2(int size)
    {

        // define
        Vector3[] vertices = new Vector3[(size - 1) * (size - 1) * 6];
        Vector3[] normals = new Vector3[(size - 1) * (size - 1) * 6];
        int[] indices = new int[(size - 1) * (size - 1) * 6];


        float[] height_map = new float[size * size];



        //Image image1 = noiseTexture.GetImage();
        //byte[] data = image.GetData();
        Image image1 = noiseTexture.Noise.GetImage(size, size);
        //Noise noise1 = noiseTexture.Noise;
        GD.Print(image1.GetWidth());
        GD.Print(image1.GetPixel(0, 0));

        for (int y = 0; y < size; y++)
        {
            for (int x = 0; x < size; x++)
            {
                //GD.Print(image.GetPixel(x, y));
                //height_map[x + y * size] = (GD.Randi() % 100) * 0.01f - 1.0f;
                height_map[x + y * size] = image1.GetPixel(x, y).R * 10.0f - 10.0f;
            }
        }
        // vertices
        for (int y = 0; y < size - 1; y++)
        {
            for (int x = 0; x < size - 1; x++)
            {

                int i = (x + y * (size - 1)) * 6;
                vertices[i] = new Vector3(x, height_map[x + y * size], y);
                vertices[i + 1] = new Vector3(x + 1, height_map[x + 1 + y * size], y);
                vertices[i + 2] = new Vector3(x, height_map[x + (y + 1) * size], y + 1);

                vertices[i + 3] = new Vector3(x + 1, height_map[x + 1 + y * size], y);
                vertices[i + 4] = new Vector3(x + 1, height_map[x + 1 + (y + 1) * size], y + 1);
                vertices[i + 5] = new Vector3(x, height_map[x + (y + 1) * size], y + 1);


                Vector3 v1 = vertices[i + 1] - vertices[i];
                Vector3 v2 = vertices[i + 2] - vertices[i];
                Vector3 cross1 = v2.Cross(v1);
                cross1 = cross1.Normalized();

                normals[i] = cross1;
                normals[i + 1] = cross1;
                normals[i + 2] = cross1;

                Vector3 v3 = vertices[i + 1] - vertices[i + 4];
                Vector3 v4 = vertices[i + 2] - vertices[i + 4];
                Vector3 cross2 = v3.Cross(v4);
                cross2 = cross2.Normalized();

                normals[i + 3] = cross2;
                normals[i + 4] = cross2;
                normals[i + 5] = cross2;



                indices[i] = i;
                indices[i + 1] = i + 1;
                indices[i + 2] = i + 2;

                indices[i + 3] = i + 3;
                indices[i + 4] = i + 4;
                indices[i + 5] = i + 5;

            }
        }


        Godot.ArrayMesh arrMesh = new ArrayMesh();
        Godot.Collections.Array arrays = [];
        arrays.Resize((int)Mesh.ArrayType.Max);
        arrays[(int)Mesh.ArrayType.Vertex] = vertices;
        arrays[(int)Mesh.ArrayType.Normal] = normals;
        //arrays[(int)Mesh.ArrayType.Index] = indices;
        arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
        return arrMesh;
    }

    private Godot.ArrayMesh MarchCubes()
    {
        int VeretxArraySize = FieldSize.X * FieldSize.Y * FieldSize.Z * 15; // může být 15
        // pro každý cell je tu 16 vertexů
        Vector3[] Vertices = new Vector3[VeretxArraySize];
        Vector3[] Normals = new Vector3[VeretxArraySize];

        float[,] EdgeVertices = new float[12, 3] { // OTOČIT NA CCW
            { 0.5f, 0.0f, 0.0f},
            { 1.0f, 0.0f, 0.5f },
            { 0.5f, 0.0f, 1.0f },
            { 0.0f, 0.0f, 0.5f },

            { 0.5f, 1.0f, 0.0f },
            { 1.0f, 1.0f, 0.5f },
            { 0.5f, 1.0f, 1.0f },
            { 0.0f, 1.0f, 0.5f },

            { 0.0f, 0.5f, 0.0f },
            { 1.0f, 0.5f, 0.0f },
            { 1.0f, 0.5f, 1.0f },
            { 0.0f, 0.5f, 1.0f }
        };

        Vector3I[] EdgeVertices2 = new Vector3I[24] {
            new Vector3I(0, 0, 0), new Vector3I(1, 0, 0), // 0
            new Vector3I(1, 0, 0), new Vector3I(1, 0, 1), // 1
            new Vector3I(0, 0, 1), new Vector3I(1, 0, 1), // 2
            new Vector3I(0, 0, 0), new Vector3I(0, 0, 1), // 3

            new Vector3I(0, 1, 0), new Vector3I(1, 1, 0), // 0
            new Vector3I(1, 1, 0), new Vector3I(1, 1, 1), // 1
            new Vector3I(0, 1, 1), new Vector3I(1, 1, 1), // 2
            new Vector3I(0, 1, 0), new Vector3I(0, 1, 1), // 3

            new Vector3I(0, 0, 0), new Vector3I(0, 1, 0), // 0
            new Vector3I(1, 0, 0), new Vector3I(1, 1, 0), // 1
            new Vector3I(1, 0, 1), new Vector3I(1, 1, 1), // 2
            new Vector3I(0, 0, 1), new Vector3I(0, 1, 1), // 3
        };
        // pro každý bod v poli iterujem

        // pokud je hodnota větší jak 0 tak se bere jako plný

        // kolik je maximální počet vertexů v jedný cell?
        // - 18? 16?

        float IsoLevel = 0.5f;

        for (uint z = 0; z < FieldSize.Z - 1; z++)
        {
            for (uint y = 0; y < FieldSize.Y - 1; y++)
            {
                for (uint x = 0; x < FieldSize.X - 1; x++)
                {
                    // základní pozice blocku / celly v 3D poli
                    uint CellPos = x + y * (uint)FieldSize.X + z * (uint)FieldSize.X * (uint)FieldSize.Y;

                    //GD.Print("gridcell: ", CellPos);

                    // zjistíme o jaký typ struktury vertexu se jedná.
                    uint CubeIndex = 0;
                    //
                    if (Field[CellPos] > IsoLevel) CubeIndex += 1;
                    if (Field[CellPos + 1] > IsoLevel) CubeIndex += 2;
                    if (Field[CellPos + ((uint)FieldSize.X * (uint)FieldSize.Y) + 1] > IsoLevel) CubeIndex += 4;
                    if (Field[CellPos + ((uint)FieldSize.X * (uint)FieldSize.Y)] > IsoLevel) CubeIndex += 8;
                    if (Field[CellPos + (uint)FieldSize.X] > IsoLevel) CubeIndex += 16;
                    if (Field[CellPos + (uint)FieldSize.X + 1] > IsoLevel) CubeIndex += 32;
                    if (Field[CellPos + (uint)FieldSize.X + ((uint)FieldSize.X * (uint)FieldSize.Y) + 1] > IsoLevel) CubeIndex += 64;
                    if (Field[CellPos + (uint)FieldSize.X + ((uint)FieldSize.X * (uint)FieldSize.Y)] > IsoLevel) CubeIndex += 128;
                    // díky získanému indexu sestrojíme vertexy pomocí tabulky

                    //CubeIndex = 61;
                    for (int i = 0; i < 15; i++)
                    {
                        int CellVertexPos = (int)CellPos * 15 + i;
                        int VertexIndex = TriangleTable[CubeIndex, i];
                        if (TriangleTable[CubeIndex, i] != -1) // triTable[cubeindex][i] != -1
                        {
                            //Vertices[CellVertexPos] = new Vector3((float)x + EdgeVertices[TriangleTable[CubeIndex, i], 0], (float)y + EdgeVertices[TriangleTable[CubeIndex, i], 1], (float)z + EdgeVertices[TriangleTable[CubeIndex, i], 2]);
                            // interpolace

                            // podle čísla
                            Vector3I i1 = EdgeVertices2[VertexIndex * 2];
                            Vector3I i2 = EdgeVertices2[VertexIndex * 2 + 1];

                            float field_point1 = Field[CellPos + i1.X + i1.Y * (uint)FieldSize.X + i1.Z * ((uint)FieldSize.X * (uint)FieldSize.Y)];
                            float field_point2 = Field[CellPos + i2.X + i2.Y * (uint)FieldSize.X + i2.Z * ((uint)FieldSize.X * (uint)FieldSize.Y)];

                            Vector3 v1 = new(i1.X, i1.Y, i1.Z);
                            Vector3 v2 = new(i2.X, i2.Y, i2.Z);

                            float InterpolatedValue;

                            float len = Mathf.Abs(field_point1 - field_point2);
                            float iso_len = Mathf.Abs(IsoLevel - field_point1);

                            InterpolatedValue = iso_len / len;

                            Vector3 vert = (v2 - v1) * InterpolatedValue + v1;

                            Vertices[CellVertexPos] = new Vector3((float)x + vert.X, (float)y + vert.Y, (float)z + vert.Z);

                        }
                        else
                        {
                            Vertices[CellVertexPos] = new Vector3(0.0f, 0.0f, 0.0f);
                        }
                    }
                    // vypočítáme normál
                    for (int i = 0; i < 15; i += 3)
                    {
                        int CellVertexPos = (int)CellPos * 15 + i;
                        Vector3 v1 = Vertices[CellVertexPos + 1] - Vertices[CellVertexPos];
                        Vector3 v2 = Vertices[CellVertexPos + 2] - Vertices[CellVertexPos];
                        Vector3 Cross1 = v2.Cross(v1);
                        Normals[CellVertexPos] = Cross1;
                        Normals[CellVertexPos + 1] = Cross1;
                        Normals[CellVertexPos + 2] = Cross1;
                    }
                }
            }
        }

        Godot.ArrayMesh arrMesh = new ArrayMesh();
        Godot.Collections.Array arrays = [];
        arrays.Resize((int)Mesh.ArrayType.Max);
        arrays[(int)Mesh.ArrayType.Vertex] = Vertices;
        arrays[(int)Mesh.ArrayType.Normal] = Normals;
        arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
        return arrMesh;

    }


    private void InitTriangulationTable()
    {
        // Nejvíce 5 trojuhelníku.
        TriangleTable = new int[256, 16] {
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
            {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
            {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
            {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
            {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
            {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
            {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
            {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
            {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
            {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
            {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
            {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
            {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
            {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
            {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
            {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
            {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
            {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
            {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
            {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
            {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
            {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
            {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
            {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
            {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
            {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
            {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
            {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
            {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
            {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
            {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
            {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
            {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
            {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
            {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
            {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
            {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
            {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
            {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
            {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
            {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
            {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
            {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
            {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
            {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
            {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
            {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
            {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
            {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
            {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
            {7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
            {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
            {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
            {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
            {9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
            {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
            {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
            {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
            {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
            {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
            {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
            {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
            {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
            {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
            {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
            {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
            {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
            {6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
            {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
            {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
            {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
            {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
            {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
            {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
            {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
            {2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
            {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
            {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
            {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
            {1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
            {11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
            {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
            {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
            {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
            {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
            {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
            {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
            {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
            {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
            {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
            {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
            {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
            {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
            {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
            {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
            {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
            {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
            {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
            {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
            {10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
            {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
            {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
            {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
            {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
            {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
            {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
            {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
            {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
            {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
            {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
            {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
            {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
            {3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
            {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
            {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
            {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
            {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
            {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
            {1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
            {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
            {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
            {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
            {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
            {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
            {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
            {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
            {11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
            {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
            {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
            {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
            {1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
            {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
            {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
            {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
            {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
            {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
            {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
            {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
            {7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
            {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
            {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
            {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
            {9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
            {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
            {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
            {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
            {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
            {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
            {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
            {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
            {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
            {0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
            {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
            {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
            {3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
            {5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
            {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
            {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
            {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
            {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
            {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
            {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
            {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
            {9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
            {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
            {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
            {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
            {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
            {3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
            {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
            {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
            {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
            {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
            {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
            {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
            {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
            {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
        };
    }

}

// https://www.youtube.com/watch?v=5CKvGYqagyI
