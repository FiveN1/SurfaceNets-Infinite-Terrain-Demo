using Godot;
using System;

namespace SurfaceNet
{
    public static class Tables
    {
        // 2D pole díky kterému zjistíme pozici bodů na hranicích pomocí case kodu.
        // 0(1) časová komplexita
        // POZNÁMKA: indexy 0 a 16 jsou prázdné.
        public static readonly byte[,] edgeCodeTable2D = new byte[16, 4] {
            {0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x00, 0x00},
            {0x10, 0x13, 0x00, 0x00},
            {0x02, 0x13, 0x00, 0x00},
            {0x20, 0x23, 0x00, 0x00},
            {0x01, 0x23, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23},
            {0x13, 0x23, 0x00, 0x00},
            {0x31, 0x32, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32},
            {0x10, 0x32, 0x00, 0x00},
            {0x02, 0x32, 0x00, 0x00},
            {0x20, 0x31, 0x00, 0x00},
            {0x01, 0x31, 0x00, 0x00},
            {0x10, 0x20, 0x00, 0x00},
            {0x00, 0x00, 0x00, 0x00}
        };


        public static readonly byte[,] edgeCodeTable = new byte[256, 12] {
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x15, 0x23, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x15, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x26, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x26, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x15, 0x26, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x15, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x26, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x26, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00},
            {0x13, 0x15, 0x23, 0x26, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x37, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x37, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x15, 0x32, 0x37, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x37, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x26, 0x31, 0x37, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x26, 0x37, 0x40, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00},
            {0x15, 0x26, 0x37, 0x45, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x26, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x26, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x23, 0x26, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x37, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x37, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x32, 0x37, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x37, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x26, 0x31, 0x37, 0x51, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x26, 0x37, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x26, 0x37, 0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x40, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x40, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x26, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x26, 0x40, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00},
            {0x13, 0x23, 0x26, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x40, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x37, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x37, 0x40, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x32, 0x37, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x37, 0x40, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x26, 0x31, 0x37, 0x46, 0x51, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x26, 0x37, 0x40, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x26, 0x37, 0x46, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x15, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x15, 0x23, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x37, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x37, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x15, 0x32, 0x37, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x37, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x31, 0x37, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x37, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x15, 0x37, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x40, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x15, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x40, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x40, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x13, 0x15, 0x23, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x40, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x37, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x37, 0x40, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x15, 0x32, 0x37, 0x45, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x37, 0x40, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x31, 0x37, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x37, 0x40, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x15, 0x37, 0x45, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x51, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x51, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x51, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x51, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x23, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x51, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x37, 0x51, 0x54, 0x57, 0x62, 0x64, 0x67},
            {0x10, 0x32, 0x37, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x32, 0x37, 0x54, 0x57, 0x62, 0x64, 0x67, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x37, 0x51, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x31, 0x37, 0x51, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x37, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x37, 0x54, 0x57, 0x64, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x51, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x51, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x40, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x40, 0x51, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x51, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x40, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x13, 0x23, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x37, 0x40, 0x51, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x37, 0x51, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x37, 0x40, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x32, 0x37, 0x57, 0x62, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x37, 0x40, 0x51, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x31, 0x37, 0x51, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x37, 0x40, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x37, 0x57, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x15, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x26, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x26, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x15, 0x23, 0x26, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x15, 0x32, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x26, 0x31, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x26, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x15, 0x26, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x40, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x15, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x40, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x26, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x26, 0x40, 0x45, 0x46, 0x73, 0x75, 0x76},
            {0x13, 0x15, 0x23, 0x26, 0x45, 0x46, 0x73, 0x75, 0x76, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x40, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x40, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x15, 0x32, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x40, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x26, 0x31, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x26, 0x40, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00},
            {0x15, 0x26, 0x45, 0x46, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x51, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x51, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x51, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x26, 0x51, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x26, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x23, 0x26, 0x54, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x51, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x51, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x32, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x51, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x26, 0x31, 0x51, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x26, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x26, 0x54, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x46, 0x51, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x46, 0x51, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x40, 0x46, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x46, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x26, 0x40, 0x46, 0x51, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x26, 0x46, 0x51, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x26, 0x40, 0x46, 0x73, 0x76, 0x00, 0x00, 0x00},
            {0x13, 0x23, 0x26, 0x46, 0x73, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x40, 0x46, 0x51, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x46, 0x51, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x40, 0x46, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x32, 0x46, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x26, 0x31, 0x40, 0x46, 0x51, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x26, 0x31, 0x46, 0x51, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x26, 0x40, 0x46, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x26, 0x46, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x62, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x62, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x62, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x15, 0x62, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x15, 0x23, 0x64, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x62, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x62, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x62, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x15, 0x32, 0x62, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x31, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x15, 0x64, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x45, 0x62, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x45, 0x62, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x40, 0x45, 0x62, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x15, 0x45, 0x62, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x40, 0x45, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x45, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x15, 0x20, 0x23, 0x40, 0x45, 0x73, 0x75, 0x00, 0x00, 0x00},
            {0x13, 0x15, 0x23, 0x45, 0x73, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x40, 0x45, 0x62, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x45, 0x62, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x32, 0x40, 0x45, 0x62, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x15, 0x32, 0x45, 0x62, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x40, 0x45, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x31, 0x45, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x15, 0x20, 0x40, 0x45, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x15, 0x45, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x51, 0x54, 0x62, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x51, 0x54, 0x62, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x54, 0x62, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x13, 0x54, 0x62, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x51, 0x54, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x23, 0x51, 0x54, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x54, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x13, 0x23, 0x54, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x51, 0x54, 0x62, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x04, 0x31, 0x32, 0x51, 0x54, 0x62, 0x64, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x54, 0x62, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x04, 0x32, 0x54, 0x62, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x51, 0x54, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x04, 0x31, 0x51, 0x54, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x54, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x04, 0x54, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x40, 0x51, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x51, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x40, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x13, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x23, 0x40, 0x51, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x23, 0x51, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x13, 0x20, 0x23, 0x40, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x13, 0x23, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x31, 0x32, 0x40, 0x51, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x02, 0x31, 0x32, 0x51, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x32, 0x40, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x02, 0x32, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x20, 0x31, 0x40, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x01, 0x31, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
        };

        public static readonly int[,] indexTable3D = new int[256,18] {
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4, -1, -1, -1, -1, -1, -1},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 3, 2, 0, 1, 3, 0, 5, 1, 0, 4, 5, 0, 2, 6, 0, 6, 4},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 6, 2, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, 0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 1, 5, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {0, 2, 3, 0, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
        };

        //
        // Kod pro generaci 'edgeCodeTable'
        //
        public static string GenerateEdgeCodeTable()
        {
            // index v table bude casecode
            // hodnoty budou intersekce mezi body.

            /* Indexy rohů v čtverci:
            *  0---1
            *  |   |
            *  2---3
            */

            string edgeCodeTable = "byte[,] edgeCodeTable = new byte[16,4] {\n";

            byte[] edgeCodes = new byte[8] {
                    // first number: begin corner, full corner
                    // second number: end corner

                    // corner 0
                    0x01,
                    0x02,
                    // corner 1
                    0x10,
                    0x13,
                    // corner 2
                    0x20,
                    0x23,
                    // corner 3
                    0x31,
                    0x32
                };

            // 15 různých možností pro 2D
            for (byte caseCode = 0; caseCode < 16; caseCode++)
            {
                string edgeCodesForCaseIndex = "\t{";
                // 
                byte codeCount = 0;
                for (byte edgeCode = 0; edgeCode < 8; edgeCode++)
                {
                    byte corner0 = (byte)((edgeCodes[edgeCode] >> 4) & 0x0F);
                    byte corner1 = (byte)(edgeCodes[edgeCode] & 0x0F);
                    // pokud je první corner plný a lyší se s druhou hodnotou.
                    if (CheckCornerAtIndex(caseCode, corner0) != CheckCornerAtIndex(caseCode, corner1) && CheckCornerAtIndex(caseCode, corner0))
                    {
                        edgeCodesForCaseIndex += "0x" + corner0.ToString() + corner1.ToString() + ", ";
                        codeCount += 1;
                    }
                }
                // prázdné indexy
                for (byte emptyEdgeCode = 0; emptyEdgeCode < 4 - codeCount; emptyEdgeCode++)
                {
                    edgeCodesForCaseIndex += "0x00, ";
                }
                // string append
                edgeCodesForCaseIndex = edgeCodesForCaseIndex.Remove(edgeCodesForCaseIndex.Length - 2, 2);
                edgeCodesForCaseIndex += "},\n";
                edgeCodeTable += edgeCodesForCaseIndex;
            }
            // string append
            edgeCodeTable = edgeCodeTable.Remove(edgeCodeTable.Length - 2, 2);
            edgeCodeTable += "\n};";

            return edgeCodeTable;
        }
        // tohle zkontroluje jestli bt na indexu 'corner0' je 1.
        // Příklad:
        //  caseCode: 0010
        //  corner0: 2
        //  -> ano bit na indexu 2 je 1.
        public static bool CheckCornerAtIndex(byte caseCode, byte cornerIndex)
        {
            return (byte)((caseCode >> cornerIndex) & 0x01) == 0x01;
        }


        public static string GenerateEdgeCodeTable3D()
        {
            // pole s všemi hranami krychle a s všemi pořadími
            // 12 * 2
            // 12 hran krychle, 2 různá pořadí hran.
            byte[] edgeCodes = new byte[24] {   
                // first number: begin corner, full corner
                // second number: end corner

                // corner 0
                0x01,
                0x02,
                0x04,
                // corner 1
                0x10,
                0x13,
                0x15,
                // corner 2
                0x20,
                0x23,
                0x26,
                // corner 3
                0x31,
                0x32,
                0x37,
                // top
                // corner 4
                0x40, // možná změnit pořadí?
                0x45,
                0x46,
                // corner 5
                0x51,
                0x54,
                0x57,
                // corner 6
                0x62,
                0x64,
                0x67,
                // corner 7
                0x73,
                0x75,
                0x76
            };
            // string
            string edgeCodeTable = "byte[,] edgeCodeTable = new byte[256,12] {\n";
            // pro každý caseCode vytvoříme pole s hranami na kterých se nachází bod isoSurface.
            for (byte caseCode = 0; caseCode <= 255; caseCode++)
            {
                string edgeCodesForCaseIndex = "\t{";
                // 
                byte codeCount = 0;
                // Zkontrolujem každnou možnou hranu s různými pořadími.
                for (byte edgeCode = 0; edgeCode < edgeCodes.Length; edgeCode++)
                {
                    // Získáme indexy dvou rohů krychle které spojuje jedna hrana.
                    // POZNÁMKA: pořadí rohů důležité jelikož podle něj určujeme interpolaci.
                    // POZNÁMKA: vždy se jde od plného rohu k prázdnému rohu
                    byte corner0 = (byte)((edgeCodes[edgeCode] >> 4) & 0x0F);
                    byte corner1 = (byte)(edgeCodes[edgeCode] & 0x0F);
                    // pokud je první roh plný a lyší se hodnotou druhého rohu, znamená to že na této hraně přechází isoSurface.
                    // POZNÁMKA: vždy se jde od plného rohu k prázdnému rohu
                    if (CheckCornerAtIndex(caseCode, corner0) != CheckCornerAtIndex(caseCode, corner1) && CheckCornerAtIndex(caseCode, corner0))
                    {
                        // zapíšeme hodnotu jako hex, (stejná hodnota kterou jsme získali jenom ji je třeba zapsat stejně)
                        edgeCodesForCaseIndex += "0x" + corner0.ToString() + corner1.ToString() + ", ";
                        codeCount += 1;
                    }
                }
                // prázdné indexy
                // číslo 12 tady znamená počet hran v kdychli
                for (byte emptyEdgeCode = 0; emptyEdgeCode < 12 - codeCount; emptyEdgeCode++)
                {
                    edgeCodesForCaseIndex += "0x00, ";
                }
                // string append
                edgeCodesForCaseIndex = edgeCodesForCaseIndex.Remove(edgeCodesForCaseIndex.Length - 2, 2);
                edgeCodesForCaseIndex += "},\n";
                edgeCodeTable += edgeCodesForCaseIndex;

                // check protože by jinak došlo k overflow.
                // jde udělat líp ale pro tohle je to jedno.
                if (caseCode == 255)
                {
                    break;
                }
            }
            // string append
            edgeCodeTable = edgeCodeTable.Remove(edgeCodeTable.Length - 2, 2);
            edgeCodeTable += "\n};";

            return edgeCodeTable;
        }



        public static string GenerateIndexTable3D()
        {

            byte[] edgeCodes = new byte[6] {
                // všechny hrany pro které lze udělat quad.
                // POZNÁMKA: pořadí určuje orientaci quadu. 
                0x37,
                0x57,
                0x67,
                0x73,
                0x75,
                0x76
            };
            // pro každou hranu jeden quad
            int[,] indices = new int[6, 6] { // CW standard
                {0, 3, 2, 0, 1, 3}, // 0x37
                {0, 5, 1, 0, 4, 5}, // 0x57
                {0, 2, 6, 0, 6, 4}, // 0x67
                { 0, 2, 3, 0, 3, 1}, // 0x73
                {0, 1, 5, 0, 5, 4}, // 0x75
                {0, 6, 2, 0, 4, 6}, // 0x76
            };

            // moc dat... možná jenom passnout horní 2 array?
            string indexTable3D = "int[,] indexTable3D = new int[256,18] {\n";

            for (byte caseCode = 0; caseCode <= 255; caseCode++)
            {
                //GD.Print("caseCode: ", caseCode);
                // vždy spojit s většími indexy, (na +x, +y, +z straně)
                // max počet quadů: 3?

                // získat vektor(y) mířící na buňky které sdílí edge vertex.
                // pro tyto bunky vytvořit quad.

                string indicesForCaseIndex = "\t{";


                int indicesCount = 0;
                for (byte edgeCode = 0; edgeCode < edgeCodes.Length; edgeCode++)
                {
                    // Získáme indexy dvou rohů krychle které spojuje jedna hrana.
                    // POZNÁMKA: pořadí rohů důležité jelikož podle něj určujeme interpolaci.
                    // POZNÁMKA: vždy se jde od plného rohu k prázdnému rohu
                    byte corner0 = (byte)((edgeCodes[edgeCode] >> 4) & 0x0F);
                    byte corner1 = (byte)(edgeCodes[edgeCode] & 0x0F);
                    // pokud je první roh plný a lyší se hodnotou druhého rohu, znamená to že na této hraně přechází isoSurface.
                    // POZNÁMKA: vždy se jde od plného rohu k prázdnému rohu
                    if (CheckCornerAtIndex(caseCode, corner0) != CheckCornerAtIndex(caseCode, corner1) && CheckCornerAtIndex(caseCode, corner0))
                    {
                        //GD.Print("edge: ", edgeCodes[edgeCode], " vertices: ");
                        for (int i = 0; i < 6; i++)
                        {
                            //GD.Print(indices[edgeCode, i]);
                            indicesForCaseIndex += indices[edgeCode, i].ToString() + ", ";
                            indicesCount++;
                        }
                    }

                    // zbytek dát jako -1
                    // array max size = 3 * 2 = 6
                }

                for (int i = 0; i < 18 - indicesCount; i++)
                {
                    indicesForCaseIndex += "-1" + ", ";
                }
                indicesForCaseIndex = indicesForCaseIndex.Remove(indicesForCaseIndex.Length - 2, 2);
                indicesForCaseIndex += "},\n";
                indexTable3D += indicesForCaseIndex;

                if (caseCode == 255)
                {
                    break;
                }
            }
            indexTable3D = indexTable3D.Remove(indexTable3D.Length - 2, 2);
            indexTable3D += "\n};";
            return indexTable3D;
        }
    }
}